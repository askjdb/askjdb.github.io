<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实现call apply bind方法</title>
    <url>/2023/03/09/%E5%AE%9E%E7%8E%B0call-apply-bind%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="实现call，apply-，bind方法"><a href="#实现call，apply-，bind方法" class="headerlink" title="实现call，apply ，bind方法"></a>实现call，apply ，bind方法</h1><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;时间跳跃&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;听风是风&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//模拟call方法</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call_</span> = <span class="keyword">function</span>(<span class="params">obj,...agrs</span>)&#123;</span><br><span class="line">    obj = obj ? obj : <span class="variable language_">window</span>;</span><br><span class="line">    agrs = agrs ? agrs : [];</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>();</span><br><span class="line">    obj[key] = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> result = obj[key](...agrs);</span><br><span class="line">    <span class="keyword">delete</span> obj[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call_</span>(obj, <span class="string">&quot;我的&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;是&quot;</span>); <span class="comment">// 我的名字是听风是风</span></span><br><span class="line">fn.<span class="title function_">call_</span>(<span class="literal">null</span>, <span class="string">&quot;我的&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;是&quot;</span>); <span class="comment">// 我的名字是时间跳跃</span></span><br><span class="line">fn.<span class="title function_">call_</span>(<span class="literal">undefined</span>, <span class="string">&quot;我的&quot;</span>, <span class="string">&quot;名字&quot;</span>, <span class="string">&quot;是&quot;</span>); <span class="comment">// 我的名字是时间跳跃</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//fn.call_()方法属于隐式调用，此时call_()方法内部的this指向是fn函数，obj.fn = this则是将fn函数变为了obj对象的一个属性，</span></span><br><span class="line"><span class="comment">//在后面调用obj.fn()的时候又发生了隐式调用，fn函数在obj内部调用，此时fn函数的this指向是obj对象了</span></span><br><span class="line"><span class="comment">//最后删除fn防止obj内的属性越来越多</span></span><br></pre></td></tr></table></figure>

<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//apply方法接受的参数是一个对象和一个数组，所以apply实现起来比call简单多了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">obj,agrs</span>)&#123;</span><br><span class="line">    obj = obj ? obj : <span class="variable language_">window</span>;</span><br><span class="line">    agrs = agrs ? agrs : [];</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>();</span><br><span class="line">    obj[key] = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> result = obj[key](...agrs);</span><br><span class="line">    <span class="keyword">delete</span> obj[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//原理与call相同</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>手写题</tag>
      </tags>
  </entry>
  <entry>
    <title>Next.js使用</title>
    <url>/2023/03/08/Next-js%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Next-js简单使用教程"><a href="#Next-js简单使用教程" class="headerlink" title="Next.js简单使用教程"></a>Next.js简单使用教程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Next.js 是一个轻量级的 React 服务端渲染应用框架。</p>
</blockquote>
<p><strong>优点：</strong></p>
<ul>
<li><p>零配置</p>
<p>自动编译并打包。从一开始就为生产环境而优化。</p>
</li>
<li><p>混合模式： SSG 和 SSR</p>
<p>在一个项目中同时支持构建时预渲染页面（SSG）和请求时渲染页面（SSR）</p>
</li>
<li><p>增量静态生成</p>
<p>在构建之后以增量的方式添加并更新静态预渲染的页面。</p>
</li>
<li><p>支持 TypeScript</p>
<p>自动配置并编译 TypeScript。</p>
</li>
<li><p>快速刷新</p>
<p>快速、可靠的实时编辑体验，已在 Facebook 级别的应用上规模上得到验证。</p>
</li>
<li><p>基于文件系统的路由</p>
<p>每个 <code>pages</code> 目录下的组件都是一条路由。</p>
</li>
<li><p>API 路由</p>
<p>创建 API 端点（可选）以提供后端功能。</p>
</li>
<li><p>内置支持CSS</p>
<p>使用 CSS 模块创建组件级的样式。内置对 Sass 的支持。</p>
</li>
<li><p>代码拆分和打包</p>
<p>采用由 Google Chrome 小组创建的、并经过优化的打包和拆分算法。</p>
</li>
</ul>
<h2 id="创建Next-js项目"><a href="#创建Next-js项目" class="headerlink" title="创建Next.js项目"></a>创建Next.js项目</h2><h3 id="手动创建Next-js项目"><a href="#手动创建Next-js项目" class="headerlink" title="手动创建Next.js项目"></a>手动创建Next.js项目</h3><blockquote>
<p>mkdir nextDemo &#x2F;&#x2F;创建项目</p>
<p>npm init &#x2F;&#x2F;初始化项目</p>
<p>npm i react react-dom next –save &#x2F;&#x2F;添加依赖</p>
</blockquote>
<p>在<code>package.json</code>中添加快捷键命令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;dev&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;next&quot;</span> <span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span> <span class="punctuation">:</span> <span class="string">&quot; next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;start&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;next start&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>创建<code>pages</code>文件夹和文件</p>
<p>在项目根目录创建<code>pages</code>文件夹并在<code>pages</code>文件夹中创建<code>index.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Next.js<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span></span><br></pre></td></tr></table></figure>

<p>运行项目</p>
<blockquote>
<p>npm run dev</p>
</blockquote>
<h3 id="creact-next-app快速创建项目"><a href="#creact-next-app快速创建项目" class="headerlink" title="creact-next-app快速创建项目"></a><code>creact-next-app</code>快速创建项目</h3><p><code>create-next-app</code>可以快速的创建<code>Next.js</code>项目，它就是一个脚手架。</p>
<blockquote>
<p>npm install -g create-next-app		&#x2F;&#x2F;全局安装脚手架</p>
<p>create-next-app nextDemo		&#x2F;&#x2F;基于脚手架创建项目</p>
<p>cd nextDemo</p>
<p>npm run dev		&#x2F;&#x2F;运行项目</p>
</blockquote>
<p><strong>目录结构介绍：</strong></p>
<ul>
<li>components文件夹: 这里是专门放置自己写的组件的，这里的组件不包括页面，指公用的或者有专门用途的组件。</li>
<li>node_modules文件夹：Next项目的所有依赖包都在这里，一般我们不会修改和编辑这里的内容。</li>
<li>pages文件夹：这里是放置页面的，这里边的内容会自动生成路由，并在服务器端渲染，渲染好后进行数据同步。</li>
<li>static文件夹： 这个是静态文件夹，比如项目需要的图片、图标和静态资源都可以放到这里。</li>
<li>.gitignore文件： 这个主要是控制git提交和上传文件的，简称就是忽略提交。</li>
<li>package.json文件：定义了项目所需要的文件和项目的配置信息（名称、版本和许可证），最主要的是使用<code>npm install</code> 就可以下载项目所需要的所有包。</li>
</ul>
<h2 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h2><p>在 Next.js 中，一个 <strong>page（页面）</strong> 就是一个从 <code>.js</code>、<code>jsx</code>、<code>.ts</code> 或 <code>.tsx</code> 文件导出（export）的 <a href="https://link.juejin.cn/?target=https://reactjs.org/docs/components-and-props.html">React 组件</a> ，这些文件存放在 <code>pages</code> 目录下。每个 page（页面）都使用其文件名作为路由（route）。</p>
<p>如果你创建了一个命名为 <code>pages/about.js</code> 的文件并导出（export）一个如下所示的 React 组件，则可以通过 <code>/about</code> 路径进行访问。</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>页面跳转一般有两种形式，第一种是利用标签<code>&lt;Link&gt;</code>,第二种是用js编程的方式进行跳转，也就是利用<code>Router</code>组件</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/pageA&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>去A页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/pageB&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>去B页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span></span><br></pre></td></tr></table></figure>

<p>注意：用<code>&lt;Link&gt;</code>标签进行跳转是非常容易的，但是又一个小坑需要你注意一下，就是他不支持兄弟标签并列的情况。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//错误写法</span></span><br><span class="line"> &lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/pageA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>去A页面<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>前端博客<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/pageA&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>去A页面<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>前端博客<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="function">()=&gt;</span>&#123;<span class="title class_">Router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/pageA&#x27;</span>)&#125;&#125;&gt;去A页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ActiveLink</span>(<span class="params">&#123; children, href &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    <span class="attr">marginRight</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">color</span>: router.<span class="property">asPath</span> === href ? <span class="string">&#x27;red&#x27;</span> : <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    router.<span class="title function_">push</span>(href)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ActiveLink</span></span><br><span class="line"></span><br><span class="line">useRouter is a <span class="title class_">React</span> <span class="title class_">Hook</span>, meaning it cannot be used <span class="keyword">with</span> classes. <span class="title class_">You</span> can either use withRouter or wrap your <span class="keyword">class</span> <span class="title class_">in</span> a <span class="keyword">function</span> component.</span><br></pre></td></tr></table></figure>





<h3 id="参数传递与接收"><a href="#参数传递与接收" class="headerlink" title="参数传递与接收"></a>参数传递与接收</h3><p>在<code>Next.js</code>中只能通过通过query（<code>?id=1</code>）来传递参数，而不能通过(<code>path:id</code>)的形式传递参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传递</span></span><br><span class="line">&lt;<span class="title class_">Link</span> href=<span class="string">&quot;/blogDetail?bid=23&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;blog.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/<span class="title class_">Link</span>&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//blog.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BlogDetail</span> = (<span class="params">&#123;router&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>blog id: &#123;router.query.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//withRouter是Next.js框架的高级组件，用来处理路由用的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">BlogDetail</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************************************************************/</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;gotoBlogDetail&#125; &gt;博客详情&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gotoBlogDetail</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/blogDetail?bid=23&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//object 形式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gotoBlogDetail</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">pathname</span>:<span class="string">&quot;/blogDetail&quot;</span>,</span><br><span class="line">        <span class="attr">query</span>:&#123;</span><br><span class="line">            <span class="attr">bid</span>:<span class="number">23</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Link</span> href=&#123;&#123;<span class="attr">pathname</span>:<span class="string">&#x27;/blogDetail&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">bid</span>:<span class="number">23</span>&#125;&#125;&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span>博客详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/<span class="title class_">Link</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">pages/post/<span class="selector-attr">[pid]</span><span class="selector-class">.js</span></span><br><span class="line">route : /post/abc  --&gt;  query : &#123; &quot;pid&quot;: <span class="string">&quot;abc&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pages/post/<span class="selector-attr">[pid]</span>/<span class="selector-attr">[comment]</span><span class="selector-class">.js</span></span><br><span class="line">route : /post/abc/a-comment  --&gt;  query : &#123; &quot;pid&quot;: <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;comment&quot;</span>: <span class="string">&quot;a-comment&quot;</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="钩子事件"><a href="#钩子事件" class="headerlink" title="钩子事件"></a>钩子事件</h3><p>利用钩子事件是可以作很多事情的，比如转换时的加载动画，关掉页面的一些资源计数器…..</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//路由发生变化时</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;routeChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1.routeChangeStart-&gt;路由开始变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由结束变化时</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;routeChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;routeChangeComplete-&gt;路由结束变化,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//浏览器 history触发前</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;beforeHistoryChange&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3,beforeHistoryChange-&gt;在改变浏览器 history之前触发,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由跳转发生错误时</span></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;routeChangeError&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4,routeChangeError-&gt;跳转发生错误,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************hash路由***********************************/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;hashChangeStart&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5,hashChangeStart-&gt;hash跳转开始时执行,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="property">events</span>.<span class="title function_">on</span>(<span class="string">&#x27;hashChangeComplete&#x27;</span>,<span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;6,hashChangeComplete-&gt;hash跳转完成时,参数为:&#x27;</span>,...args)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//注意钩子事件要放到useEff()里面，使用完毕卸载，否则每次更新页面都会触发事件</span></span><br></pre></td></tr></table></figure>

<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><h3 id="getStaticProps"><a href="#getStaticProps" class="headerlink" title="getStaticProps"></a><code>getStaticProps</code></h3><p><strong>构建时请求数据</strong></p>
<p>在build阶段将页面构建成静态的html文件，这样线上直接访问HTML文件，性能极高。</p>
<ul>
<li>使用<code>getStaticProps</code>方法在build阶段返回页面所需的数据。</li>
<li>如果是动态路由的页面，使用<code>getStaticPaths</code>方法来返回所有的路由参数，以及是否需要回落机制。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// posts will be populated at build time by getStaticProps()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Blog</span>(<span class="params">&#123; posts &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;posts.map((post) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This function gets called at build time on server-side.</span></span><br><span class="line"><span class="comment">// It won&#x27;t be called on client-side, so you can even do</span></span><br><span class="line"><span class="comment">// direct database queries. See the &quot;Technical details&quot; section.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getStaticProps</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// Call an external API endpoint to get posts.</span></span><br><span class="line">  <span class="comment">// You can use any data fetching library</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://.../posts&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> posts = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// By returning &#123; props: &#123; posts &#125; &#125;, the Blog component</span></span><br><span class="line">  <span class="comment">// will receive `posts` as a prop at build time</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      posts,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Blog</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="getServerSideProps"><a href="#getServerSideProps" class="headerlink" title="getServerSideProps"></a><code>getServerSideProps</code></h3><p><strong>每次访问时请求数据</strong></p>
<p>页面中<code>export</code>一个<code>async</code>的<code>getServerSideProps</code>方法，next就会在每次请求时候在服务端调用这个方法。</p>
<ul>
<li>方法只会在服务端运行，每次请求都运行一边<code>getServerSideProps</code>方法</li>
<li>如果页面通过浏览器端<code>Link</code>组件导航而来，Next会向服务端发一个请求，然后在服务端运行<code>getServerSideProps</code>方法，然后返回JSON到浏览器。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// Render data...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This gets called on every request</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getServerSideProps</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// Fetch data from external API</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://.../data`</span>)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Pass data to the page via props</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="getInitialProps"><a href="#getInitialProps" class="headerlink" title="getInitialProps"></a>getInitialProps</h3><p><code>getInitialProps</code> 是挂在 <code>React</code> 组件上的静态方法</p>
<p>我们可以在这个方法内部完成页面数据获取的工作</p>
<p>使用示例如下图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6e6610d913f48a78feec3599ccaff77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="carbon (18).png"></p>
<p>那我们难道不可以在 <code>React</code> 组件内部 <code>ComponentDidMount</code> 去获取页面数据吗？ </p>
<p>当然可以，不过既然 <code>Nextjs</code> 提供了这个为数据获取提供的方法，那自然有它的道理 </p>
<p>毕竟 <code>Nextjs</code> 身为 同构框架，事情并没有表面上看到的这么简单 </p>
<p>我们如果需要 <code>Nextjs</code> 的 <code>SSR</code> 大部分功能的话，还是尽可能地按照 <code>Nextjs</code> 提供的数据获取规范走</p>
<blockquote>
<p><code>getInitialProps</code> 只会在组件身为页面 <code>pages</code> 目录下的一员时生效</p>
</blockquote>
<p>值得注意的是，<code>getInitialProps</code> 会在服务端渲染时执行，也会在客户端渲染时执行这也是事情不简单的原因所在</p>
<p>当页面通过页面刷新等直接形式访问时，会触发 <code>Nextjs</code> 使用服务端渲染的方式返回页面数据</p>
<p>此时 <code>getInitialProps</code> 会在服务端执行，浏览器端不会执行</p>
<p>如图所示，通过服务端渲染访问 <code>Home</code> 时，在终端会输出 <code>console.log</code>：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d3e3022b4cf4c37aac0a5dc0af33531~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="image.png"></p>
<p>当页面通过浏览器端路由跳转的形式访问时（如浏览器前进后退），该页面渲染不会触发 <code>Nextjs</code> 服务端渲染</p>
<p>此时页面渲染前仍会触发 <code>getInitialProps</code> 方法，只不过执行时在浏览器端，如图所示：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8211450c77f3420396ed22215009f009~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="image.png"></p>
<p>所以实际上 <code>getInitialProps</code> 方法会根据当前页面渲染时的端侧不同，自主地选择在 Node 端还是 Client 端执行</p>
<p>getInitialProps 一些需要了解的点：</p>
<ul>
<li>数据获取通常为异步操作，<code>getInitialProps</code> 方法使用 <code>async</code> 异步执行即可</li>
<li><code>getInitialProps</code> 异步获取数据，页面会等到页面数据都获取加载完成后才进行渲染</li>
<li>因为是双端执行，所以需要尤为小心地使用仅一端存在的 <code>API</code>，如：<code>document</code>、<code>window</code> 等</li>
<li>因为是双端执行，数据获取需要某些时候考虑如何取用户状态如服务端侧可以使用 <code>ctx.req/ctx.res</code></li>
<li>因为是双端执行，在 <code>getInitialProps</code> 方法里进行页面跳转也需要根据端侧不同使用跳转方式也不同</li>
</ul>
<p>不清楚是不是自己还没 <code>Get</code> 到它的 <code>G</code> 点的缘故，<code>getInitialProps</code> 就目前自己使用的情况来看，它并不讨我喜欢 </p>
<p>在想是不是还是使用旧有的 <code>getStaticProps</code> 和 <code>getServerProps</code>，最起码很清晰所属哪一端，能够使用什么 <code>API</code></p>
<h2 id="CSS支持（现在的Next-js支持直接import引入css）"><a href="#CSS支持（现在的Next-js支持直接import引入css）" class="headerlink" title="CSS支持（现在的Next.js支持直接import引入css）"></a>CSS支持（现在的Next.js支持直接import引入css）</h2><h3 id="添加全局css"><a href="#添加全局css" class="headerlink" title="添加全局css"></a>添加全局css</h3><p>要将样式表添加到您的应用程序中，请在 <code>pages/_app.js</code> 文件中导入（import）CSS 文件。</p>
<p>例如，假设有以下样式表 <code>styles.css</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;SF Pro Text&#x27;</span>, <span class="string">&#x27;SF Pro Icons&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, <span class="string">&#x27;Helvetica&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">680px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先创建一个 <a href="https://www.nextjs.cn/docs/advanced-features/custom-app"><code>pages/_app.js</code> 文件</a> （如果不存在的话）。 然后 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import</code></a> 该 <code>styles.css</code> 文件。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../styles.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新创建的 `pages/_app.js` 文件中必须有此默认的导出（export）函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些样式 (<code>styles.css</code>) 将应用于你的应用程序中的所有页面和组件。 由于样式表的全局特性，并且为了避免冲突，你应该 <strong>只在 <a href="https://www.nextjs.cn/docs/advanced-features/custom-app"><code>pages/_app.js</code></a> 文件中导入（import）样式表</strong>。</p>
<p>在开发中，以这种方式表示样式可让你在编辑样式时对其进行热重载，这意味着你可以保持应用程序的状态。</p>
<p>在生产环境中，所有 CSS 文件将自动合并为一个经过精简的 <code>.css</code> 文件。</p>
<p>从 Next.js <strong>9.5.4</strong> 版本开始，你可以在应用程序中的任何位置从 <code>node_modules</code> 目录导入（import） CSS 文件了。</p>
<p>对于全局样式表（例如 <code>bootstrap</code> 或 <code>nprogress</code>），你应该在 <code>pages/_app.js</code> 文件中对齐进行导入（import）。 例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/_app.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于导入第三方组件所需的 CSS，可以在组件中进行。例如：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/ExampleDialog.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Dialog</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@reach/dialog&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VisuallyHidden</span> <span class="keyword">from</span> <span class="string">&#x27;@reach/visually-hidden&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@reach/dialog/styles.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleDialog</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [showDialog, setShowDialog] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowDialog</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params"></span>) =&gt; <span class="title function_">setShowDialog</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;open&#125;</span>&gt;</span>Open Dialog<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Dialog</span> <span class="attr">isOpen</span>=<span class="string">&#123;showDialog&#125;</span> <span class="attr">onDismiss</span>=<span class="string">&#123;close&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;close-button&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;close&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">VisuallyHidden</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">VisuallyHidden</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello there. I am a dialog<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Dialog</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加组件级CSS"><a href="#添加组件级CSS" class="headerlink" title="添加组件级CSS"></a>添加组件级CSS</h3><ul>
<li><p><code>[name].module.css</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//login<span class="selector-class">.module</span><span class="selector-class">.css</span></span><br><span class="line"><span class="selector-class">.loginDiv</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改第三方样式</span><br><span class="line"><span class="selector-class">.loginDiv</span> :<span class="built_in">global</span>(.active)&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">30</span>, <span class="number">144</span>, <span class="number">255</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./login.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;div className=&#123;styles.<span class="property">loginDiv</span>&#125;/&gt;</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>Next.js 允许你导入（import）具有 <code>.scss</code> 和 <code>.sass</code> 扩展名的 Sass 文件。 你可以通过 CSS 模块以及 <code>.module.scss</code> 或 <code>.module.sass</code> 扩展名来使用组件及的 Sass</p>
<blockquote>
<p>npm i sass –save</p>
</blockquote>
<p>如果要配置 Sass 编译器，可以使用 <code>next.config.js</code> 文件中的 <code>sassOptions</code> 参数进行配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">sassOptions</span>: &#123;</span><br><span class="line">    <span class="attr">includePaths</span>: [path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;styles&#x27;</span>)],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>CSS-in-JS</code></p>
<p>可以使用任何现有的 CSS-in-JS 解决方案。 最简单的一种是内联样式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;hi there&lt;/p&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>使用 <code>styled-jsx</code> 的组件就像这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">HelloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello world</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>scoped!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">jsx</span>&gt;</span><span class="language-css">&#123;`</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">p</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="attribute">color</span>: blue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="attribute">background</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="selector-tag">div</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">            <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      `&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">global</span> <span class="attr">jsx</span>&gt;</span><span class="language-css">&#123;`</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        <span class="selector-tag">body</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">          <span class="attribute">background</span>: black;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      `&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HelloWorld</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><h3 id="模块懒加载"><a href="#模块懒加载" class="headerlink" title="模块懒加载"></a>模块懒加载</h3><p>第一步，先选择一个需要懒加载的插件，我们拿moment做例子。先安装它：</p>
<p>npm install moment -s</p>
<p>第二步，在页面里，用moment写一个例子</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Task</span> = (<span class="params">&#123; time &#125;</span>) =&gt; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>time：&#123;time&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Task</span>.<span class="property">getInitialProps</span> = <span class="keyword">async</span> (ctx) =&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> moment = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">    	<span class="attr">time</span>: moment.<span class="title function_">default</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="number">60</span>*<span class="number">1000</span>).<span class="title function_">fromNow</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Task</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三步，重启，运行，在network里会发现moment的代码被新打包成了一个1.js加载出来</p>
<h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><p>第一步，先新建一个组件</p>
<p>task.list.jsx</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">TaskList</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这里是任务列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TaskList</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步，再在页面内引入</p>
<p>task.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&#x27;next/dynamic&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TaskList</span> = <span class="title function_">dynamic</span>(<span class="keyword">import</span>(<span class="string">&#x27;../components/pages/task/task.list&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Task</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">TaskList</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TaskList</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第三步，重启，运行。在network里会发现task.list.js被新打包了一个js加载出来</p>
<h2 id="自定义Header"><a href="#自定义Header" class="headerlink" title="自定义Header"></a>自定义Header</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Head</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>技术胖是最胖的！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&#x27;utf-8&#x27;</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Head</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在Next-js框架下使用AntDesineUI"><a href="#在Next-js框架下使用AntDesineUI" class="headerlink" title="在Next.js框架下使用AntDesineUI"></a>在Next.js框架下使用AntDesineUI</h2>]]></content>
      <tags>
        <tag>Next-js</tag>
      </tags>
  </entry>
  <entry>
    <title>手写实现Object.create</title>
    <url>/2023/03/14/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Object-create/</url>
    <content><![CDATA[<h2 id="Object-create-p-创建一个新对象，使用现有的对象p来提供新创建的对象的-proto-。"><a href="#Object-create-p-创建一个新对象，使用现有的对象p来提供新创建的对象的-proto-。" class="headerlink" title="Object.create(p):创建一个新对象，使用现有的对象p来提供新创建的对象的__proto__。"></a>Object.create(p):创建一个新对象，使用现有的对象p来提供新创建的对象的__proto__。</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Mycreate</span>=<span class="keyword">function</span> (<span class="params">p</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> p !==<span class="string">&#x27;object&#x27;</span> ||p===<span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;传入的参数不是对象或传入参数为空&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>=p</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;xixixi&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="title class_">Object</span>.<span class="title class_">Mycreate</span>(<span class="title class_">Person</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>)<span class="comment">//xixixi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">isPrototypeOf</span>(p))<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>手写题</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Promise</title>
    <url>/2023/03/14/%E6%89%8B%E5%86%99Promise/</url>
    <content><![CDATA[<h1 id="手写Promise遇到的问题"><a href="#手写Promise遇到的问题" class="headerlink" title="手写Promise遇到的问题"></a>手写Promise遇到的问题</h1><h2 id="一-源码"><a href="#一-源码" class="headerlink" title="一.源码"></a>一.源码</h2><h2 id="本文讲述了-Promise-的用法与方法介绍，详细解剖-Promise-的状态流程以及-Promise-关键问题"><a href="#本文讲述了-Promise-的用法与方法介绍，详细解剖-Promise-的状态流程以及-Promise-关键问题" class="headerlink" title="本文讲述了 Promise 的用法与方法介绍，详细解剖 Promise 的状态流程以及 Promise 关键问题"></a>本文讲述了 Promise 的用法与方法介绍，详细解剖 Promise 的状态流程以及 Promise 关键问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">concenters</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> concenters !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;草泥马,你传的不是函数&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">changeThis</span>()</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">concenters</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;padding&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变resolve和reject函数内部this指向</span></span><br><span class="line">    <span class="title function_">changeThis</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolve</span> = <span class="variable language_">this</span>.<span class="property">resolve</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reject</span> = <span class="variable language_">this</span>.<span class="property">reject</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功的回调</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;padding&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">state</span> !== <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallback</span>.<span class="title function_">shift</span>()(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败的回调</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;padding&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">state</span> !== <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCallback</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallback</span>.<span class="title function_">shift</span>()(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            onFulfilled = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            onRejected = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> reason</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Promise2</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">ResolvePromise</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x === <span class="title class_">Promise2</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不能返回自身&#x27;</span>)</span><br><span class="line">                            <span class="comment">//如果 x是当前 promise 本身（promise2和x相等），那么reject TypeError</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                            x.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//其他值直接就是成功</span></span><br><span class="line">                            <span class="title function_">resolve</span>(x);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(e)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e.<span class="property">message</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//这里加入setTimeout是为了实现Promise在样例里的异步调用</span></span><br><span class="line">                </span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title class_">ResolvePromise</span>(<span class="title function_">onFulfilled</span>(self.<span class="property">value</span>))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title class_">ResolvePromise</span>(<span class="title function_">onRejected</span>(self.<span class="property">reason</span>))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;padding&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    self.<span class="property">onFulfilledCallback</span>.<span class="title function_">push</span>(onFulfilled)</span><br><span class="line">                    self.<span class="property">onRejectedCallback</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result=[];</span><br><span class="line">            <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">addPromise</span>=(<span class="params">index,value</span>)=&gt;&#123;</span><br><span class="line">                result[index]=value</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">if</span>(count===promises.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise,index</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(promise <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    promise.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">addPromise</span>(index,val)</span><br><span class="line">                    &#125;,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">addPromise</span>(index,promise)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(promise <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(val)</span><br><span class="line">                    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">reject</span>(err)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(promise)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">            promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(promise  <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">                    promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(val)</span><br><span class="line">                    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        <span class="keyword">if</span>(count===promises.<span class="property">length</span>)&#123;</span><br><span class="line">                            <span class="title function_">reject</span>(err)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(promise)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Promise</span></span><br></pre></td></tr></table></figure>

<h2 id="二-问题"><a href="#二-问题" class="headerlink" title="二.问题"></a>二.问题</h2><ul>
<li><p>当then函数执行后，onFulfilled函数返回一个Promise，为什么这种情况要使用x.then(resolve,reject)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Promise2</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title function_">ResolvePromise</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (x === <span class="title class_">Promise2</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不能返回自身&#x27;</span>)</span><br><span class="line">                            <span class="comment">//如果 x是当前 promise 本身（promise2和x相等），那么reject TypeError</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                                                    x.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">     <span class="comment">/*如果 x是另一个 promise（即x是一个promise），那么沿用它的 state 和 result 状态</span></span><br><span class="line"><span class="comment">       如果x是pending态，那么promise必须要在pending，直到x变成fulfilled或者rejected</span></span><br><span class="line"><span class="comment">       如果x是fulfilled态，用相同的value执行promise</span></span><br><span class="line"><span class="comment">       如果x是rejected态，用相同的reason拒绝promise</span></span><br><span class="line"><span class="comment">       				x.then(resolve, reject)传入Promise2的reject和resolve函数是为了完成上面三步，</span></span><br><span class="line"><span class="comment">                    即通过x的状态改变Promise2的状态，所以需要传入Promise2的resolve和reject函数，来改变Promise2</span></span><br><span class="line"><span class="comment">                    的状态。而x.then()函数里面新建的promise对象不用管他在 then 中新创建的 Promise，它的状态变为 fulfilled 的节点是在上一个 Promise的回调执行完毕的时候。也就是说当一个 Promise 的状态被 fulfilled 之后，会执行其回调函数，而回调函数返回的结果会被当作 value， 返回给下一个 Promise(也就是then 中产生的 Promise)，同时下一个 Promise的状态也会被改变(执行 resolve 或 reject)， 然后再去执行其回调,以此类推下去…链式调用的效应就出来了。*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>onfulfilled函数为啥要异步执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">               <span class="comment">//这里加入setTimeout是为了实现Promise在样例里的异步调用</span></span><br><span class="line">               </span><br><span class="line">               <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                   <span class="title class_">ResolvePromise</span>(<span class="title function_">onFulfilled</span>(self.<span class="property">value</span>))</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>因为不去异步执行onfulfilled函数就无法实现Promsie整体的异步调用</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Promise</span>=<span class="built_in">require</span>(<span class="string">&#x27;./Promise&#x27;</span>);</span><br><span class="line"><span class="comment">// const Promise=require(&#x27;./index&#x27;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">// reject(2)</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个promise成功&quot;</span>,value);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个promise失败&quot;</span>,reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>这种情况如果不加setTimeout就会输出1，2，3；</p>
<p>而加了setTimeout则会输出1，3，2；</p>
</li>
<li><p>这三个函数为什么要写在新的Promise(即Promise2)里</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123; </span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title class_">ResolvePromise</span>(<span class="title function_">onFulfilled</span>(self.<span class="property">value</span>))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">ResolvePromise</span>(<span class="title function_">onRejected</span>(self.<span class="property">reason</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (self.<span class="property">state</span> === <span class="string">&#x27;padding&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        self.<span class="property">onFulfilledCallback</span>.<span class="title function_">push</span>(onFulfilled)</span><br><span class="line">        self.<span class="property">onRejectedCallback</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为then函数返回一个Prmoise对象，而这个Promise对象状态由then函数里的两个参数函数（onfulfilled，onrejected）的返回值决定，</p>
<p>将这三个函数放在这里是为了Promise2内部的ResolvePromise函数可以得到onFulfilled&#x2F;onRejected函数的返回值，根据这个返回值，</p>
<p>修改Promsie2的状态，self等于调用then的Promise实例</p>
<h2 id="三-其他方法"><a href="#三-其他方法" class="headerlink" title="三.其他方法"></a>三.其他方法</h2><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><ul>
<li><p>接收一个数组，数组中如有非Promise项，则此项当做成功</p>
</li>
<li><p>如果所有Promise都成功，则返回成功结果数组</p>
</li>
<li><p>如果有一个Promise失败，则返回这个失败结果</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">addData</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">            result[index] = value</span><br><span class="line">            count++</span><br><span class="line">            <span class="keyword">if</span> (count === promises.<span class="property">length</span>) <span class="title function_">resolve</span>(result)</span><br><span class="line">        &#125;</span><br><span class="line">        promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">addData</span>(index, res)</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">addData</span>(index, promise)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="race"><a href="#race" class="headerlink" title="race"></a><strong>race</strong></h3><p>接收一个Promise数组，数组中如有非Promise项，则此项当作成功.</p>
<p>哪个Promise最快得到结果，就返回哪个结果，无论成功失败.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        promises.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res)</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(promise)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>any</strong></p>
<p>any与all相反</p>
<p>接收一个Promise数组，数组中如有非Promise项，则此项当作成功.</p>
<p>如果有一个Promise成功，则饭返回这个成功结果.</p>
<p>如果所有Promise都失败，则报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> <span class="title function_">any</span>(<span class="params">promises</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">            promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(val)</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    count++</span><br><span class="line">                    <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">AggregateError</span>(<span class="string">&#x27;All promises were rejected&#x27;</span>))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>手写题</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重总结</title>
    <url>/2023/03/09/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//样例数组</span><br><span class="line">const arr = [1, 2, 2, &#x27;abc&#x27;, &#x27;abc&#x27;, true, true, false, false, undefined, undefined, NaN, NaN]</span><br></pre></td></tr></table></figure>

<h3 id="1-利用Set-Array-from"><a href="#1-利用Set-Array-from" class="headerlink" title="1.利用Set()+Array.from()"></a>1.利用Set()+Array.from()</h3><ul>
<li><code>Set</code>对象：是<strong>值的集合</strong>，你可以按照插入的顺序<strong>迭代</strong>它的元素。 Set中的元素只会<strong>出现一次</strong>，即Set中的<strong>元素是唯一的</strong>。</li>
<li><code>Array.from()</code> 方法：对一个<strong>类似数组</strong>或<strong>可迭代对象</strong>创建一个新的，浅拷贝的数组实例。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：以上去方式对<code>NaN</code>和<code>undefined</code>类型去重也是有效的，是因为<code>NaN</code>和<code>undefined</code>都可以被存储在Set中， <code>NaN</code>之间被视为相同的值（尽管在js中：<code>NaN !== NaN</code>）。</p>
<h3 id="2-利用两层循环-数组的splice方法"><a href="#2-利用两层循环-数组的splice方法" class="headerlink" title="2.利用两层循环+数组的splice方法"></a>2.利用两层循环+数组的splice方法</h3><blockquote>
<p>通过两层循环对数组元素进行逐一比较，然后通过splice方法来删除重复的元素。此方法对NaN是无法进行去重的，因为进行比较时<code>NaN !== NaN</code>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>)</span><br><span class="line">        len-- <span class="comment">// 减少循环次数提高性能</span></span><br><span class="line">        j-- <span class="comment">// 保证j的值自加后不变</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-利用数组的indexOf方法"><a href="#3-利用数组的indexOf方法" class="headerlink" title="3.利用数组的indexOf方法"></a>3.利用数组的indexOf方法</h3><blockquote>
<p>新建一个空数组，遍历需要去重的数组，将数组元素存入新数组中，存放前判断数组中是否已经含有当前元素，没有则存入。此方法也无法对<code>NaN</code>去重。</p>
</blockquote>
<ul>
<li><code>indexOf()</code> 方法：返回调用它的String对象中第一次出现的指定值的索引，从 <code>fromIndex</code> 处进行搜索。如果未找到该值，则返回 -1。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(item) === -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArr <span class="comment">// 返回一个新数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>

<h3 id="4-利用数组的includes方法"><a href="#4-利用数组的includes方法" class="headerlink" title="4.利用数组的includes方法"></a>4.利用数组的includes方法</h3><blockquote>
<p>此方法逻辑与indexOf方法去重异曲同工，只是用includes方法来判断是否包含重复元素。</p>
</blockquote>
<ul>
<li><code>includes()</code>方法：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newArr.<span class="title function_">includes</span>(item)) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：为什么<code>includes</code>能够检测到数组中包含<code>NaN</code>，其涉及到<code>includes</code>底层的实现。如下图为<code>includes</code>实现的部分代码，在进行判断是否包含某元素时会调用<code>sameValueZero方法</code>进行比较，如果为<code>NaN</code>，则会使用<code>isNaN()</code>进行转化。</p>
<p>简单测试<code>includes()</code>对<code>NaN</code>的判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr.<span class="title function_">includes</span>(<span class="title class_">NaN</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-利用数组的filter-indexOf"><a href="#5-利用数组的filter-indexOf" class="headerlink" title="5.利用数组的filter()+indexOf()"></a>5.利用数组的filter()+indexOf()</h3><blockquote>
<p>filter方法会对满足条件的元素存放到一个新数组中，结合indexOf方法进行判断。</p>
</blockquote>
<ul>
<li><code>filter()</code> 方法：会创建一个新数组，其包含<strong>通过所提供函数实现的测试</strong>的所有元素。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined ]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里的输出结果中不包含<code>NaN</code>，是因为<code>indexOf()</code>无法对NaN进行判断，即<code>arr.indexOf(item) === index</code>返回结果为false。测试如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testArr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="title class_">NaN</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testArr.<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="6-利用Map"><a href="#6-利用Map" class="headerlink" title="6.利用Map()"></a>6.利用Map()</h3><blockquote>
<p>Map对象是JavaScript提供的一种数据结构，结构为键值对形式，将数组元素作为map的键存入，然后结合<code>has()</code>和<code>set()</code>方法判断键是否重复。</p>
</blockquote>
<ul>
<li><code>Map</code> 对象：用于保存键值对，并且能够记住键的原始插入顺序。任何值（对象或者原始值）都可以作为一个键或一个值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">has</span>(item)) &#123; <span class="comment">// has()用于判断map是否包为item的属性值</span></span><br><span class="line">      map.<span class="title function_">set</span>(item, <span class="literal">true</span>) <span class="comment">// 使用set()将item设置到map中，并设置其属性值为true</span></span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：使用<code>Map()</code>也可对<code>NaN</code>去重，原因是Map进行判断时认为<code>NaN</code>是与<code>NaN</code>相等的，剩下所有其它的值是根据 <code>===</code> 运算符的结果判断是否相等。</p>
<h3 id="7-利用对象"><a href="#7-利用对象" class="headerlink" title="7.利用对象"></a>7.利用对象</h3><blockquote>
<p>其实现思想和<code>Map()</code>是差不多的，主要是利用了对象的属性名不可重复这一特性。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeDuplicate</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = []</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[item]) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(item)</span><br><span class="line">      obj[item] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">removeDuplicate</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// [ 1, 2, &#x27;abc&#x27;, true, false, undefined, NaN ]</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>手写题</tag>
      </tags>
  </entry>
  <entry>
    <title>硅谷直聘项目介绍</title>
    <url>/2023/03/08/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/</url>
    <content><![CDATA[<h1 id="硅谷直聘项目"><a href="#硅谷直聘项目" class="headerlink" title="硅谷直聘项目"></a>硅谷直聘项目</h1><h2 id="1-1-项目描述"><a href="#1-1-项目描述" class="headerlink" title="1.1. 项目描述"></a><strong>1.1.</strong> <strong>项目描述</strong></h2><ul>
<li><p>此项目为一个前后台分离的招聘的 SPA, 包括前端应用和后端应用</p>
</li>
<li><p>包括用户注册&#x2F;登陆, 大神&#x2F;老板列表, 实时聊天等模块</p>
</li>
<li><p>前端: 使用 React 全家桶+ES6+Webpack 等技术</p>
</li>
<li><p>后端: 使用 Node + express + mongodb + socketIO 等技术</p>
</li>
<li><p>采用模块化、组件化、工程化的模式开发</p>
</li>
</ul>
<h2 id="1-2-项目功能界面"><a href="#1-2-项目功能界面" class="headerlink" title="1.2. 项目功能界面"></a><strong>1.2.</strong> <strong>项目功能界面</strong></h2><h3 id="大神主界面"><a href="#大神主界面" class="headerlink" title="大神主界面"></a>大神主界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E5%A4%A7%E7%A5%9E%E4%B8%BB%E7%95%8C%E9%9D%A2.jpg" alt="大神主界面.jpg"></p>
<h3 id="大神消息列表"><a href="#大神消息列表" class="headerlink" title="大神消息列表"></a>大神消息列表</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E5%A4%A7%E7%A5%9E%E6%B6%88%E6%81%AF%E5%88%97%E8%A1%A8.png" alt="大神消息列表"></p>
<h3 id="大神个人中心"><a href="#大神个人中心" class="headerlink" title="大神个人中心"></a>大神个人中心</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E5%A4%A7%E7%A5%9E%E4%B8%AA%E4%BA%BA%E9%A1%B5%E9%9D%A2.png" alt="大神个人页面"></p>
<h3 id="老板主界面"><a href="#老板主界面" class="headerlink" title="老板主界面"></a>老板主界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E8%80%81%E6%9D%BF%E9%A1%B5%E9%9D%A2.png" alt="老板页面"></p>
<h3 id="老板-消息列表"><a href="#老板-消息列表" class="headerlink" title="老板 消息列表"></a>老板 消息列表</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E8%80%81%E6%9D%BF%E6%B6%88%E6%81%AF%E5%88%97%E8%A1%A8.png" alt="老板消息列表"></p>
<h3 id="老板-个人中心"><a href="#老板-个人中心" class="headerlink" title="老板 个人中心"></a>老板 个人中心</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E8%80%81%E6%9D%BF%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83.png" alt="老板用户中心"></p>
<h3 id="聊天界面"><a href="#聊天界面" class="headerlink" title="聊天界面"></a>聊天界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E8%81%8A%E5%A4%A9%E9%A1%B5%E9%9D%A2.png" alt="聊天页面"></p>
<h3 id="登陆界面"><a href="#登陆界面" class="headerlink" title="登陆界面"></a>登陆界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="登录页面"></p>
<h3 id="注册界面"><a href="#注册界面" class="headerlink" title="注册界面"></a>注册界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2.png" alt="注册页面"></p>
<h3 id="老板信息完善界面"><a href="#老板信息完善界面" class="headerlink" title="老板信息完善界面"></a>老板信息完善界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E8%80%81%E6%9D%BF%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84%E9%A1%B5%E9%9D%A2.png" alt="老板信息完善页面"></p>
<h3 id="大神信息完善界面"><a href="#大神信息完善界面" class="headerlink" title="大神信息完善界面"></a>大神信息完善界面</h3><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E5%A4%A7%E7%A5%9E%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84%E9%A1%B5%E9%9D%A2.png" alt="大神信息完善页面"></p>
<h2 id="1-3技术选型"><a href="#1-3技术选型" class="headerlink" title="1.3技术选型"></a>1.3技术选型</h2><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.png" alt="image-20230308202839516"></p>
<h2 id="1-4-前端路由"><a href="#1-4-前端路由" class="headerlink" title="1.4. 前端路由"></a><strong>1.4.</strong> <strong>前端路由</strong></h2><p><img src="/%E7%A1%85%E8%B0%B7%E7%9B%B4%E8%81%98/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1.png" alt="image-20230308203103893"></p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
</search>
